#!/usr/bin/env perl

use strict;
use warnings;

use File::Path qw(mkpath rmtree);
use File::Copy;
use FileHandle;
use POSIX qw(strftime);


# Pick up VDT configuration values.  If not using the VDT defs file, comment out
# the following two lines and check the configuration settings below carefully
# to remove references to the DEFS hash.
use VDT::Defs;
my %DEFS = %{read_defs('../defs')};


# ==============================================================================
# configuration settings
# ==============================================================================

# Path that contains your dpkg-deb and fakeroot commands.  Comment out if
# dpkg-deb and fakeroot are already expected to be in PATH.
my $DEBIAN_COMMAND_PATH = '/p/condor/workspaces/vdt/debian-build-tools/bin';

# Path that contains the Dpkg.pm Perl module.  Comment out if Perl can already
# find Dpkg.pm without help.
my $DEBIAN_PERL_LIB = '/p/condor/workspaces/vdt/debian-build-tools/lib/perl5/vendor_perl/5.8.8';

# The path to the CA certificates tarball on which the DEB file will be based.
my $TARBALL_PATH = $DEFS{TARBALL_PATH};

# The Debian package name for the CA certificates.  See:
# http://www.debian.org/doc/debian-policy/ch-binary.html#s3.1
my $DEB_PACKAGE = 'vdt-ca-certificates';

# Three version numbers: One for the CA certificates themselves, and one for the
# Debian packaging of them, and one for the IGTF distribution on which the DEB
# file is based.  In most cases, the Debian revision should be '1', but we match 
# what we get from the CA Certificates minor version, because it has the same meaning:
# it's only incremented when the packaging is messed with. 
my $CA_CERTIFICATES_VERSION = $DEFS{OUR_CERTS_MAJOR_VERSION};
my $DEBIAN_REVISION = $DEFS{OUR_CERTS_MINOR_VERSION};
my $IGTF_VERSION = $DEFS{IGTF_CERTS_VERSION};

# The root of the APT repository.  Comment out if not using an APT repository.
my $APT_REPOSITORY_ROOT = '/p/vdt/public/html/debian/apt';

# Two pieces of APT repository metadata.  The origin string identifies who made
# the package (i.e., your organization), and the label string is a general label
# for the repository or package.  Only needed if using an APT repository.
my $APT_ORIGIN = 'VDT Team';
my $APT_LABEL = 'VDT CA certificate distribution';

# Install directory for the DEB file itself.  If using an APT repository, give a
# directory relative to the APT repository root defined above; otherwise, use an
# absolute path to the install directory.
my $INSTALL_DIR = 'certificates';

# The Debian distribution under which the DEB file will be placed within the APT
# repository.  Not needed unless using an APT repository.  See, e.g.:
# http://www.debian.org/doc/manuals/repository-howto/repository-howto.en.html
my $DEB_DISTRIBUTION = 'cacerts';

# The Debian priority level for the CA certificates package.  See:
# http://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities
my $DEB_PRIORITY = 'extra';

# The Debian section in which to put the CA certificates package. See:
# http://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections
my $DEB_SECTION = 'misc';


# ==============================================================================
# initialization
# ==============================================================================

# let the user know that we are doing something
print "Making a Debian binary package of $TARBALL_PATH...\n";
print "    CA certificates version: $CA_CERTIFICATES_VERSION\n";
print "    Debian package revision: $DEBIAN_REVISION\n";

# globals
chomp(my $RUN_DIR = `pwd`);
my $WORKING_DIR_BASENAME = 'debian';
my $WORKING_DIR_PATH = "$RUN_DIR/$WORKING_DIR_BASENAME";
my $META_DIR = "$WORKING_DIR_PATH/DEBIAN";
my $GRID_SECURITY_DIR = "$WORKING_DIR_PATH/etc/grid-security";
my $DEB_VERSION = "${CA_CERTIFICATES_VERSION}-${DEBIAN_REVISION}";
my $DEB_FILENAME = "${DEB_PACKAGE}_${DEB_VERSION}_all.deb";
my $INSTALL_PATH = defined($APT_REPOSITORY_ROOT) ? "$APT_REPOSITORY_ROOT/$INSTALL_DIR" : $INSTALL_DIR;

# environment for child processes
$ENV{PATH} = "$DEBIAN_COMMAND_PATH:$ENV{PATH}" if defined $DEBIAN_COMMAND_PATH;
$ENV{PERL5LIB} = $DEBIAN_PERL_LIB if defined $DEBIAN_PERL_LIB;

# make sure Debian commands are available and working
my @missing_debian_commands;
push(@missing_debian_commands, 'dpkg-deb') unless system('dpkg-deb --version >/dev/null 2>&1') == 0;
push(@missing_debian_commands, 'fakeroot') unless system('fakeroot --version >/dev/null 2>&1') == 0;
push(@missing_debian_commands, 'dpkg-scanpackages') unless system('dpkg-scanpackages --version >/dev/null 2>&1') == 0;
if (@missing_debian_commands) {
    print 'make-deb: Missing the following Debian ';
    print ((scalar(@missing_debian_commands) > 1) ? 'commands' : 'command');
    print ": " . join(', ', @missing_debian_commands);
    print "\nPlease configure this script ($0) to find the required Debian tools.\n";
    exit 1;
}

# initialize directories
rmtree($WORKING_DIR_PATH); # start fresh
mkpath($META_DIR);
mkpath($GRID_SECURITY_DIR);


# ==============================================================================
# DEB file
# ==============================================================================

# unpack certificate tarball
print "    Unpacking certificate tarball...\n";
chdir($GRID_SECURITY_DIR);
system("tar xzf $TARBALL_PATH");

print "    Assembling the DEB file...\n";

# create a control file
my $control = <<EOF;
Package: $DEB_PACKAGE
Version: $DEB_VERSION
Priority: $DEB_PRIORITY
Section: $DEB_SECTION
Architecture: all
Conflicts: osg-ca-certs
Maintainer: VDT Team <vdt-support\@opensciencegrid.org>
Description: CA certificates from the VDT
 Contains CA certificates distributed as a convenience by the VDT.
 The VDT makes no assurances that these CA certificates are good,
 useful, or right for your site.  The distribution is based on IGTF
 release $IGTF_VERSION.
EOF
my $control_fh = new FileHandle("$META_DIR/control", 'w');
if (not defined $control_fh) {
    print "\nERROR: Could not create '$META_DIR/control': $!\n";
    exit 1;
}
print $control_fh $control;
undef $control_fh; # automatically closes file

# create a changelog file
chomp(my $timestamp = `date -R`);
my $changelog = <<EOF;
$DEB_PACKAGE ($DEB_VERSION) experimental; urgency=low

  * Change details maintained on the VDT website:
    http://vdt.cs.wisc.edu/certificate_authorities.html

 -- VDT Team <vdt-support\@opensciencegrid.org>  $timestamp
EOF
my $changelog_fh = new FileHandle("$META_DIR/changelog", 'w');
if (not defined $changelog_fh) {
    print "\nERROR: Could not create '$META_DIR/changelog': $!\n";
    exit 1;
}
print $changelog_fh $changelog;
undef $changelog_fh; # automatically closes file

# create a copyright file
my $copyright = <<EOF;
This package was created by the VDT <vdt-support\@opensciencegrid.org>
on $timestamp.

The packaging is Copyright (C) 2009, University of Wisconsin-Madison.

 Licensed under the Apache License, Version 2.0 (the "License"); you
 may not use this file except in compliance with the License.

 On Debian systems, the complete text of the License can be found in
 /usr/share/common-licenses/Apache-2.0.  Or, you may obtain a copy of
 the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 implied.  See the License for the specific language governing
 permissions and limitations under the License.
EOF
my $copyright_fh = new FileHandle("$META_DIR/copyright", 'w');
if (not defined $copyright_fh) {
    print "\nERROR: Could not create '$META_DIR/copyright': $!\n";
    exit 1;
}
print $copyright_fh $copyright;
undef $copyright_fh; # automatically closes file

# make the DEB file
chdir($RUN_DIR);
system("fakeroot dpkg-deb --build $WORKING_DIR_BASENAME $DEB_FILENAME");

# install the DEB file
mkpath($INSTALL_PATH);
move($DEB_FILENAME, $INSTALL_PATH);

# clean up, part 1
rmtree($WORKING_DIR_PATH);

# stop now unless using an apt repository
exit 0 if not defined $APT_REPOSITORY_ROOT;

# ==============================================================================
# APT repository
# ==============================================================================
print "    Setting up the APT repository...\n";

# more setup!
my $REPOSITORY_DIR_PREFIX = "dists/cacerts/main/binary-";
my $APT_INDICES_DIR = "$APT_REPOSITORY_ROOT/indices";
my $APT_OVERRIDE_PATH = "$APT_INDICES_DIR/override.${DEB_DISTRIBUTION}.${DEB_SECTION}";

# create an override file
mkpath($APT_INDICES_DIR);
my $override = "$DEB_PACKAGE $DEB_PRIORITY $DEB_SECTION\n";
my $override_fh = new FileHandle($APT_OVERRIDE_PATH, 'w');
if (not defined $override_fh) {
    print "\nERROR: Could not create '$APT_OVERRIDE_PATH': $!\n";
    exit 1;
}
print $override_fh $override;
undef $override_fh; # automatically closes file

chdir($APT_REPOSITORY_ROOT);
for my $architecture (qw(i386 amd64)) {
    print "    Building APT repository indexes for $architecture...\n";

    # path where index files go
    my $binary_dir = "$APT_REPOSITORY_ROOT/${REPOSITORY_DIR_PREFIX}${architecture}";
    mkpath($binary_dir);

    # make index files
    system("dpkg-scanpackages --arch $architecture $INSTALL_DIR $APT_OVERRIDE_PATH | bzip2 -9c > $binary_dir/Packages.bz2");

    # Release file
    my $release_file = <<EOF;
Archive: $DEB_DISTRIBUTION
Component: $DEB_SECTION
Origin: $APT_ORIGIN
Label: $APT_LABEL
Architecture: $architecture
EOF
    my $release_path = "$APT_REPOSITORY_ROOT/$REPOSITORY_DIR_PREFIX$architecture/Release";
    my $release_fh = new FileHandle($release_path, 'w');
    if (not defined $release_fh) {
        print "\nERROR: Could not create '$release_path': $!\n";
        exit 1;
    }
    print $release_fh $release_file;
    undef $release_fh; # automatically closes file
}
