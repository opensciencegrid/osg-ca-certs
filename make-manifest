#!/usr/bin/env perl
use strict;
use warnings;

my %defs = %{read_defs("defs")};

## EDIT - remove the "-test" from the end of $manifest_file when releasing
my $manifest_file = "vdt-igtf-ca-certs-version-test";
my $new_manifest_file = "$manifest_file.new";

if (! -e $defs{TARBALL_PATH}) {
    die "ERROR: No tarball at $defs{TARBALL_PATH}\n";
}

print "Making manifest of $defs{TARBALL_PATH}...\n";

##
## Calculate the MD5 of our tarbal
##
my $md5sum_out = `md5sum $defs{TARBALL_PATH} 2> /dev/null`;
my $md5sum = (split(/ /, $md5sum_out))[0];

##
## Calculate the timestamp
##
my $timestamp;
my ($sec,$min,$hour,$mday,$month,$year) = gmtime(time);
$month++;
$year += 1900;
$timestamp = sprintf("%d%02d%02dT%02d%02d%02d", $year, $month, $mday, $hour, $min, $sec);

## 
## Write the manifest
##
open(MANIFEST, ">", "$defs{CERTS_DIR}/$new_manifest_file");
print MANIFEST "dataversion=1             # The version of data in this file\n";
print MANIFEST "timestamp=$timestamp # Time of creation of this file\n";
print MANIFEST "certsversion=$defs{OUR_CERTS_MAJOR_VERSION}-$defs{OUR_CERTS_MINOR_VERSION}         # Version of the certificates\n";
print MANIFEST "versiondesc=$defs{CERTS_DESCRIPTION}\n";
print MANIFEST "tarball=$defs{WEB_PATH}\n";
print MANIFEST "tarball_md5sum=$md5sum\n";
close(MANIFEST);

## 
## Install the manifest
##
system("mkdir -p $defs{CERTS_DIR}/old-manifests");

if(-e "$defs{CERTS_DIR}/$manifest_file") {
    system("cp $defs{CERTS_DIR}/$manifest_file $defs{CERTS_DIR}/old-manifests/$manifest_file.$timestamp");
    print "    Backup: $defs{CERTS_DIR}/old-manifests/$manifest_file.$timestamp\n";
}
else {
    print "    Backup: No previous manifest file exists.  Nothing to backup.\n";
}

system("mv $defs{CERTS_DIR}/$new_manifest_file $defs{CERTS_DIR}/$manifest_file");
print "    Manifest: $defs{CERTS_DIR}/$manifest_file\n";

exit 0;


##
## Read a defs file of the form NAME=VALUE
## Allows for macro expansion in defs file - $(VAR) refers to previously defined VAR
##
sub read_defs {
    my $file = shift;
    open(DEFS, "<", "$file") or die("Cannot read defs file: $!");
    my @lines = <DEFS>;
    close(DEFS);
    
    # Strip whitespace and comments
    @lines = grep !/^\#/, map { s/^\s+//; s/\s+$//; $_ } @lines;
    
    # Process the lines
    my %tmp;
    foreach my $line (@lines) {
        my ($key, $value) = split /\s*=\s*/, $line, 2;
        next unless($key && $value);
        $value =~ s/\$\(([^\)]+)\)/$tmp{$1}/g;
        $tmp{$key} = $value;
    }
    return \%tmp;
}
